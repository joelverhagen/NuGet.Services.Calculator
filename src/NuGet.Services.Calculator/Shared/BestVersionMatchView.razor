@if (Model.BestMatch != null)
{
    <div class="alert alert-success" role="alert">
        The version <code class="badge badge-code badge-success">@Model.BestMatch.ToNormalizedString()</code> is the best match for the
        version range <code class="badge badge-code badge-light">@Model.VersionRange.ToNormalizedString()</code>.
    </div>
}
else
{
<div class="alert alert-warning" role="alert">
    None of the versions satisfy the version range <code class="badge badge-code badge-light">@Model.VersionRange.ToNormalizedString()</code>.
</div>
}

<p>The following versions were considered, displayed in the order of precedence:</p>
<ol class="list-inline">
    @foreach (var version in Model.Versions)
    {
        string badgeClass;
        string iconClass;
        string iconTitle;
        if (version.Version == Model.BestMatch)
        {
            badgeClass = "badge-success";
            iconClass = "oi-check";
            iconTitle = "best match and compatible";
        }
        else if (version.IsCompatible)
        {
            badgeClass = "badge-info";
            iconClass = "oi-check";
            iconTitle = "compatible";
        }
        else
        {
            badgeClass = "badge-light";
            iconClass = "oi-x";
            iconTitle = "incompatible";
        }

        <li class="list-inline-item">
            <code class="badge badge-code @badgeClass">
                <span class="oi @iconClass" aria-hidden="true" title="@iconTitle"></span>
                @version.Version.ToNormalizedString()
            </code>
        </li>
    }
</ol>

@code {
    [Parameter]
    public BestVersionMatch Model { get; set; }
}
