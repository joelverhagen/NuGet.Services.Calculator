@attribute [Microsoft.AspNetCore.Components.RouteAttribute(Routes.FindBestPackageVersionMatch)]
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject VersionRangeCalculator Service

<Title>Package Versions - NuGet Calculator</Title>
<h1>Package Versions</h1>

<EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmitAsync">
    <div class="form-group">
        <label for="packageId">Package ID</label>
        <InputText class="form-control input-code" id="packageId" @bind-Value="_input.PackageId" />
        <ValidationMessage For="@(() => _input.PackageId)" class="invalid-feedback" />
    </div>
    <div class="form-group">
        <label for="versionRange">Version Range</label>
        <InputText class="form-control input-code" id="versionRange" @bind-Value="_input.VersionRange" />
        <ValidationMessage For="@(() => _input.VersionRange)" class="invalid-feedback" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" disabled="@_loading">
            @if (_loading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                @:Loading...
            }
            else
            {
                @:Submit
            }
        </button>
        @if (_output?.Result?.Versions?.Any() == true)
        {
            <button type="button" class="btn btn-secondary" @onclick="EditVersions">Edit Versions</button>
        }
    </div>
</EditForm>

@if (_output != null && _output.InputStatus == InputStatus.Valid)
{
    if (_output.Result.Versions.Any())
    {
        <BestVersionMatchView Model="_output.Result" />
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            The package ID <span class="badge badge-code badge-light">@(_output.PackageId)</span> does not exist.
        </div>
    }
}

@code {
    private EditContext _editContext;
    private FindBestPackageVersionMatchInput _input;
    private FindBestPackageVersionMatchOutput _output;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _input = new FindBestPackageVersionMatchInput
        {
            PackageId = "NuGet.Versioning",
            VersionRange = "[4.3.0, 5.0.0)",
        };
        _editContext = new EditContext(_input);
        _editContext.AddDataAnnotationsValidation();

        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var currentQuery = QueryHelpers.ParseQuery(currentUri.Query);

        if (currentQuery.TryGetValue("packageId", out var packageId))
        {
            _input.PackageId = packageId.First();
            _editContext.NotifyFieldChanged(_editContext.Field(nameof(FindBestPackageVersionMatchInput.PackageId)));
        }

        if (currentQuery.TryGetValue("versionRange", out var versionRange))
        {
            _input.VersionRange = versionRange.First();
            _editContext.NotifyFieldChanged(_editContext.Field(nameof(FindBestVersionMatchInput.VersionRange)));
        }

        if (_editContext.IsModified() && _editContext.Validate())
        {
            await HandleValidSubmitAsync();
        }
    }

    private void EditVersions()
    {
        if (_output?.Result?.Versions?.Any() != true)
        {
            return;
        }

        var pathAndQuery = QueryHelpers.AddQueryString(Routes.FindBestVersionMatch, new Dictionary<string, string>
        {
            { "versionRange", _output.Result.VersionRange.OriginalString },
            { "versions", string.Join("\r\n", _output.Result.Versions.Select(x => x.Version.ToNormalizedString())) },
        });

        NavigationManager.NavigateTo(pathAndQuery);
    }

    private async Task HandleValidSubmitAsync()
    {
        if (_loading)
        {
            return;
        }

        _loading = true;
        try
        {
            var pathAndQuery = QueryHelpers.AddQueryString(Routes.FindBestPackageVersionMatch, new Dictionary<string, string>
            {
                { "packageId", _input.PackageId },
                { "versionRange", _input.VersionRange },
            });
            await JSRuntime.InvokeVoidAsync("history.replaceState", null, string.Empty, pathAndQuery);

            _output = await Service.FindBestPackageVersionMatchAsync(_input, CancellationToken.None);
        }
        finally
        {
            _loading = false;
        }
    }
}