@attribute [Microsoft.AspNetCore.Components.RouteAttribute(Routes.FindBestVersionMatch)]
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject VersionRangeCalculator Service

<Title>Find Best Version Match - NuGet Calculator</Title>
<h1>Find Best Version Match</h1>

<EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmitAsync">
    <div class="form-group">
        <label for="versionRange">Version Range</label>
        <InputText class="form-control input-code" id="versionRange" placeholder="[1.0.0, )" @bind-Value="_input.VersionRange" />
        <ValidationMessage For="@(() => _input.VersionRange)" class="invalid-feedback" />
    </div>
    <div class="form-group">
        <label for="versions">Versions</label>
        <InputTextArea class="form-control input-code" id="versions" placeholder="1.1.0" rows="5" @bind-Value="_input.Versions" />
        <ValidationMessage For="@(() => _input.Versions)" class="invalid-feedback" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

@if (_output != null && _output.InputStatus == InputStatus.Valid)
{
    <BestVersionMatchView Model="_output.Result" />
}

@code {
    private EditContext _editContext;
    private FindBestVersionMatchInput _input;
    private FindBestVersionMatchOutput _output;

    protected override void OnInitialized()
    {
        _input = new FindBestVersionMatchInput();
        _editContext = new EditContext(_input);
        _editContext.AddDataAnnotationsValidation();

        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var currentQuery = QueryHelpers.ParseQuery(currentUri.Query);

        if (currentQuery.TryGetValue("versionRange", out var versionRange))
        {
            _input.VersionRange = versionRange.First();
            _editContext.NotifyFieldChanged(_editContext.Field(nameof(FindBestVersionMatchInput.VersionRange)));
        }

        if (currentQuery.TryGetValue("versions", out var versions))
        {
            _input.Versions = versions.First();
            _editContext.NotifyFieldChanged(_editContext.Field(nameof(FindBestVersionMatchInput.Versions)));
        }

        if (_editContext.IsModified() && _editContext.Validate())
        {
            _output = Service.FindBestVersionMatch(_input);
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        var localPath = new Uri(NavigationManager.Uri).LocalPath;
        var pathAndQuery = QueryHelpers.AddQueryString(localPath, new Dictionary<string, string>
        {
            { "versionRange", _input.VersionRange },
            { "versions", _input.Versions },
        });
        await JSRuntime.InvokeVoidAsync("history.replaceState", null, string.Empty, pathAndQuery);

        _output = Service.FindBestVersionMatch(_input);
    }
}